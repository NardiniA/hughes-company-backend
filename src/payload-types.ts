/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-menu".
 */
export interface MainMenu {
  id: string;
  items: {
    type?: 'link' | 'subMenu';
    label: string;
    subMenu: {
      blocks: {
        appearance?: 'primary' | 'secondary' | 'arrow';
        link: {
          type?: 'reference' | 'custom';
          label: string;
          reference:
            | {
                value: string | Page;
                relationTo: 'pages';
              }
            | {
                value: string | Post;
                relationTo: 'posts';
              };
          url: string;
          newTab?: boolean;
        };
        id?: string;
        blockName?: string;
        blockType: 'menuLink';
      }[];
    };
    link: {
      type?: 'reference' | 'custom';
      reference:
        | {
            value: string | Page;
            relationTo: 'pages';
          }
        | {
            value: string | Post;
            relationTo: 'posts';
          };
      url: string;
      newTab?: boolean;
    };
    id?: string;
  }[];
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: {
    type: 'banner' | 'pageHeader';
    banner: {
      title: string;
      image: string | Media;
    };
    page_header: {
      title: string;
    };
  };
  layout: (
    | {
        title: string;
        description: {
          [k: string]: unknown;
        }[];
        images: {
          image: string | Media;
          size: 'full' | 'half' | 'third' | 'quarter';
          id?: string;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'about';
      }
    | {
        content: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'detail';
      }
    | {
        form: string | Form;
        id?: string;
        blockName?: string;
        blockType: 'embedded-form';
      }
    | {
        content: {
          title: string;
          description: {
            [k: string]: unknown;
          }[];
        };
        form: string | Form;
        id?: string;
        blockName?: string;
        blockType: 'contact-form';
      }
    | {
        title: string;
        id?: string;
        blockName?: string;
        blockType: 'recent_posts';
      }
  )[];
  fullTitle?: string;
  breadcrumbs: {
    doc?: string | Page;
    url?: string;
    label?: string;
    id?: string;
  }[];
  slug?: string;
  parent?: string | Page;
  sites: string[] | Site[];
  meta: {
    title?: string;
    description?: string;
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  cloudinary: {
    public_id?: string;
    original_filename?: string;
    format?: string;
    secure_url?: string;
    resource_type?: string;
  };
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes: {
    card: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    portrait: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    square: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    feature: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields: (
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'text';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'textarea';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: string;
        options: {
          label: string;
          value: string;
          id?: string;
        }[];
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'select';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'email';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'state';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'country';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        defaultValue?: number;
        required?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'number';
      }
    | {
        name: string;
        label?: string;
        width?: number;
        required?: boolean;
        defaultValue?: boolean;
        id?: string;
        blockName?: string;
        blockType: 'checkbox';
      }
    | {
        message?: {
          [k: string]: unknown;
        }[];
        id?: string;
        blockName?: string;
        blockType: 'message';
      }
  )[];
  submitButtonLabel?: string;
  confirmationType?: 'message' | 'redirect';
  confirmationMessage: {
    [k: string]: unknown;
  }[];
  redirect: {
    type?: 'reference' | 'custom';
    reference: {
      value: string | Page;
      relationTo: 'pages';
    };
    url: string;
  };
  emails: {
    emailTo: string;
    bcc?: string;
    replyTo?: string;
    replyToName?: string;
    emailFrom?: string;
    emailFromName?: string;
    subject: string;
    message?: {
      [k: string]: unknown;
    }[];
    id?: string;
  }[];
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sites".
 */
export interface Site {
  id: string;
  name: string;
  url: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  description: string;
  content: {
    [k: string]: unknown;
  }[];
  slug?: string;
  publishDate: string;
  categories: string[] | TodayCategory[];
  sites: string[] | Site[];
  _status?: 'draft' | 'published';
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "today-categories".
 */
export interface TodayCategory {
  id: string;
  name: string;
  slug?: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newspapers".
 */
export interface Newspaper {
  id: string;
  issue: number;
  newspaper: string | Media;
  fullTitle?: string;
  sites: string[] | Site[];
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstname: string;
  lastname: string;
  roles?: ('admin' | 'editor')[];
  sites?: string[] | Site[];
  email?: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData: {
    field: string;
    value: string;
    id?: string;
  }[];
  createdAt: string;
  updatedAt: string;
}
